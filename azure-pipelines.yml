# Ephemeral Pipeline

# This pipeline deploys a blob to a container into a storage account under vnet restriction access

trigger:
- master

resources:
- repo: self

variables:
  ResourceGroup: owaep
  vNetResourceGroup: owaep
  vnetName: vnetgeneralpurpose
  subnetName: snetagents
  location: westeurope
  acrName: acragentimagepurpose
  imageName: $(acrName).azurecr.io/azuredevopsagents/ubuntu:latest
  containerName: 'cnttestfilespurpose'
  accountName: 'stageneralpurpose'
  agentPoolName: owaep
  azureSubscription: 'Personal'
  containerRegistryConnection: 'acragentimagepurpose'

stages:
- stage: Deploy
  jobs:
  - job: PrepareAgent
    displayName: Prepare Agent
    pool: Hosted Ubuntu 1604
    steps:
    - task: AzureContainerAgentCreate@0
      displayName: 'Azure Container Create for pool netcoreconf2020'
      inputs:
        azureSubscription: '$(azureSubscription)'
        resourceGroupName: '$(ResourceGroup)'
        location: '$(location)'
        azureDevOpsToken: '$(agentPoolAccessToken)'
        containerRegistry: '$(containerRegistryConnection)'
        imageName: '$(imageName)'
        agentPool: '$(agentPoolName)'
        agentPrefix: 'netcoreconf2020-'
        vnetResourceGroupName: '$(vNetResourceGroup)'
        vnetName: '$(vnetName)'
        subnetName: '$(subnetName)'
        osType: 'Linux'
        memory: 1

  - deployment: Deploy
    environment: 'Production'
    dependsOn: PrepareAgent
    displayName: Deploy Files
    pool: ${{ variables.agentPoolName }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            fetchDepth: 1
            clean: true
          - task: TerraformTaskV1@0
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: '$(azureSubscription)'
              backendAzureRmResourceGroupName: '$(ResourceGroup)'
              backendAzureRmStorageAccountName: 'stageneralpurpose'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'netcoreconf2020.tfstate'
          - task: TerraformTaskV1@0
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-input=false -var "resource_group_name=$(ResourceGroup)" -var "storage_account_name=$(accountName)" -var "storage_container_name=$(containerName)" -out netcoreconf2020plan'
              environmentServiceNameAzureRM: '$(azureSubscription)'
          - task: TerraformTaskV1@0
            displayName: 'Terraform Validate and Apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '-auto-approve netcoreconf2020plan'
              environmentServiceNameAzureRM: '$(azureSubscription)'

